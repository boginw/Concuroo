@startuml

interface node {
  String getLiteral()
}
interface expression
interface binaryExpression
interface unaryExpression
interface arithmeticBinaryExpression
interface logicalBinaryExpression
interface prefixExpression
interface postfixExpression
interface statement
interface selectionStatement
interface literalExpression
interface jumpStatement
interface iterationStatement
interface LHSExpression

interface unaryExpression {
  expression firstOperand
  String operator
}

interface binaryExpression {
  expression firstOperand
  expression secondOperand
  String operator
}

interface literalExpression {
  Object value
}

interface incrementDecrementExpression {
  LHSExpression firstOperand
}

class addressOfExpressionÂ {
  LHSExpression firstOperand
}

class expressionStatement {
  expression expression
}

class compoundStatement {
  List<statement> statements
  SymbolTable scope
}

class whileStatement {
  expression condition
  statement consequence
}

class declarationStatement {
  List<declarationSpecifier> specifiers
  declarator declarator
  initializer initializer
}

class returnStatement {
  expression returnValue
}

class ifStatement{
  expression condition
  statement consequence
  statement alternative
}

class stringLiteral{
  String value
}

class intLiteral{
  int value
}

class floatLiteral{
  double value
}

class assignmentExpression {
  LHSExpression firstOperand
  initializer secondOperand
}

node <|-- expression
node <|-- statement

expression <|-- binaryExpression
expression <|-- unaryExpression
expression <|-- literalExpression
expression <|-- LHSExpression

literalExpression <|-- intLiteral
literalExpression <|-- floatLiteral
literalExpression <|-- stringLiteral

unaryExpression <|-- prefixExpression
unaryExpression <|-- postfixExpression

postfixExpression <|-- incrementDecrementExpression

prefixExpression <|-- castExpression
prefixExpression <|-- addressOfExpression
prefixExpression <|-- additivePrefixExpression
prefixExpression <|-- incrementDecrementExpression

LHSExpression <|-- referencePrefixExpression
LHSExpression <|-- variableExpression
LHSExpression <|-- variablePointerExpression
LHSExpression <|-- dereferenceExpression

incrementDecrementExpression <|-- incrementExpression
incrementDecrementExpression <|-- decrementExpression

binaryExpression <|-- arithmeticBinaryExpression
binaryExpression <|-- logicalBinaryExpression
binaryExpression <|-- assignmentExpression

arithmeticBinaryExpression <|-- additiveExpression
arithmeticBinaryExpression <|-- multiplicativeExpression

logicalBinaryExpression <|-- logicalEqualityExpression
logicalBinaryExpression <|-- logicalAndExpression
logicalBinaryExpression <|-- logicalOrExpression

statement <|-- declarationStatement
statement <|-- compoundStatement
statement <|-- expressionStatement
statement <|-- selectionStatement
statement <|-- iterationStatement
statement <|-- jumpStatement

jumpStatement <|-- returnStatement
jumpStatement <|-- breakStatement
jumpStatement <|-- continueStatement

iterationStatement <|-- whileStatement

selectionStatement <|-- ifStatement

@enduml